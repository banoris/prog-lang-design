-- Haskell module generated by the BNF converter

module CalcLec.Skel where

import qualified CalcLec.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transExp :: CalcLec.Abs.Exp -> Result
transExp x = case x of
  CalcLec.Abs.EAdd exp product -> failure x
  CalcLec.Abs.ESub exp product -> failure x
  CalcLec.Abs.EProd product -> failure x
transProduct :: CalcLec.Abs.Product -> Result
transProduct x = case x of
  CalcLec.Abs.EMul product integer -> failure x
  CalcLec.Abs.EDiv product integer -> failure x
  CalcLec.Abs.EInt integer -> failure x

