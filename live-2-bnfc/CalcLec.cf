{-

## Problem? Well, it is ambigous, and also right associative
3+(2+1) -- 3 is Integer, (2+1) is an Exp
	EAdd. Exp ::= Exp "+" Exp ;
	ESub. Exp ::= Exp "-" Exp ;
	EMul. Exp ::= Exp "*" Exp ;
	EDiv. Exp ::= Exp "/" Exp ;
	EInt. Exp ::= Integer ;
		$ echo "3 - 2 - 1" | CalcLec/Test
		ESub (EInt 3) (ESub (EInt 2) (EInt 1))
		# 3-2-1 = (3-2)-1 = 0, but above tree gives 3-(2-1) = 2


## Below can fix above right assoc issue.
Now, 3+(2+1) is not possible since rhs of "+" is Integer not Exp. The only
possible tree output is 3+(2+1). For a grammar to ambigous, the same
input text should give the same abs syntax tree.
	EAdd. Exp ::= Exp "+" Integer ;
	ESub. Exp ::= Exp "-" Integer ;
	EMul. Exp ::= Exp "*" Integer ;
	EDiv. Exp ::= Exp "/" Integer ;
	EInt. Exp ::= Integer ;

	Any other problem? Multiply and division have no precedence!
	5*6+7 = 37, but above rule will give 65
	EAdd (EMul (EInt 5) 6) 7 -- looks correct? Hmm...

	$ echo "5+6*7" | CalcLec/Test 
	EMul (EAdd (EInt 5) 6) 7 -- (5+6) * 7 ??
	Makes sense, lhs of "*" is Exp, rhs is Integer


## How about this? Nope, 1+2 will give parser error. Why?
Because lhs and rhs of "+" is of different datatype! Generated
parser doesn't allow this. What if we define Product as subclass of Exp?
Yup, that's the solution!
	EAdd. Exp ::= Exp "+" Product ;
	ESub. Exp ::= Exp "-" Product ;
	-- Add this to fix -- EMul. Product ::= Product "*" Integer ;
	EDiv. Product ::= Product "/" Integer ;
	EInt. Product ::= Integer;
	
	Abs.hs -- as you can see, two diff datatype
		data Exp = EAdd Exp Product | ESub Exp Product | EInt Integer
		  deriving (C.Eq, C.Ord, C.Show, C.Read)
		data Product = EMul Product Integer | EDiv Product Integer
		  deriving (C.Eq, C.Ord, C.Show, C.Read)
	
	Problem? Parenthesis doesn't work. 2 * (1+3)


## Now, we have 3 diff category of expression with difference precedence
Atom is the highest, Product 2nd highest, and Exp the lowest
	EAdd. Exp      ::= Exp "+" Product;
	ESub. Exp      ::= Exp "-" Product;
	EProd. Exp     ::= Product; -- TODO: explain why this is coercion
	EMul. Product  ::= Product "*" Atom;
	EDiv. Product  ::= Product "/" Atom;
	EAtom. Product ::= Atom;
	EInt. Atom     ::= Integer;
	EPar. Atom     ::= "(" Exp ")" ;

## Rename the categories above based on precedence number
	EAdd. Exp     ::= Exp "+" Exp1;
	ESub. Exp     ::= Exp "-" Exp1;
	-- EProd. Exp ::= Exp1; -- fix coercion
	_. E      Exp ::= Exp1
	EMul. Exp1    ::= Exp1 "*" Exp2;
	EDiv. Exp1    ::= Exp1 "/" Exp2;
	_. Exp1       ::= Exp2;
	EInt. Exp2    ::= Integer;
	_. Exp2       ::= "(" Exp ")" ; -- TODO: Magic...
	
	Or use the coercion pragma


-}

EAdd. Exp     ::= Exp "+" Exp1;
ESub. Exp     ::= Exp "-" Exp1;
EMul. Exp1    ::= Exp1 "*" Exp2;
EDiv. Exp1    ::= Exp1 "/" Exp2;
EInt. Exp2    ::= Integer;

coercions Exp 2;
