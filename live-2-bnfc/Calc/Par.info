-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Calc/Par.y
-----------------------------------------------------------------------------

state 9 contains 4 shift/reduce conflicts.
state 10 contains 4 shift/reduce conflicts.
state 11 contains 4 shift/reduce conflicts.
state 12 contains 4 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Integer -> L_integ                                 (1)
	Exp -> Exp '+' Exp                                 (2)
	Exp -> Exp '-' Exp                                 (3)
	Exp -> Exp '*' Exp                                 (4)
	Exp -> Exp '/' Exp                                 (5)
	Exp -> Integer                                     (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'*'            { PT _ (TS _ 1) }
	'+'            { PT _ (TS _ 2) }
	'-'            { PT _ (TS _ 3) }
	'/'            { PT _ (TS _ 4) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Integer         rule  1
	Exp             rules 2, 3, 4, 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 4

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	Exp -> Integer .                                    (rule 6)

	'*'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'/'            reduce using rule 6
	%eof           reduce using rule 6


State 4

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'*'            shift, and enter state 5
	'+'            shift, and enter state 6
	'-'            shift, and enter state 7
	'/'            shift, and enter state 8
	%eof           accept


State 5

	Exp -> Exp '*' . Exp                                (rule 4)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 12

State 6

	Exp -> Exp '+' . Exp                                (rule 2)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 11

State 7

	Exp -> Exp '-' . Exp                                (rule 3)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 10

State 8

	Exp -> Exp '/' . Exp                                (rule 5)

	L_integ        shift, and enter state 2

	Integer        goto state 3
	Exp            goto state 9

State 9

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)
	Exp -> Exp '/' Exp .                                (rule 5)

	'*'            shift, and enter state 5
			(reduce using rule 5)

	'+'            shift, and enter state 6
			(reduce using rule 5)

	'-'            shift, and enter state 7
			(reduce using rule 5)

	'/'            shift, and enter state 8
			(reduce using rule 5)

	%eof           reduce using rule 5


State 10

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp '-' Exp .                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'*'            shift, and enter state 5
			(reduce using rule 3)

	'+'            shift, and enter state 6
			(reduce using rule 3)

	'-'            shift, and enter state 7
			(reduce using rule 3)

	'/'            shift, and enter state 8
			(reduce using rule 3)

	%eof           reduce using rule 3


State 11

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp '+' Exp .                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'*'            shift, and enter state 5
			(reduce using rule 2)

	'+'            shift, and enter state 6
			(reduce using rule 2)

	'-'            shift, and enter state 7
			(reduce using rule 2)

	'/'            shift, and enter state 8
			(reduce using rule 2)

	%eof           reduce using rule 2


State 12

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp '*' Exp .                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'*'            shift, and enter state 5
			(reduce using rule 4)

	'+'            shift, and enter state 6
			(reduce using rule 4)

	'-'            shift, and enter state 7
			(reduce using rule 4)

	'/'            shift, and enter state 8
			(reduce using rule 4)

	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 5
Number of non-terminals: 3
Number of states: 13
